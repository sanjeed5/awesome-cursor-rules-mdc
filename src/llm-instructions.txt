Your task is to create an EXTREMELY DETAILED and COMPREHENSIVE guide that covers:

1. Code Organization and Structure:
   - Directory structure best practices for {library_name}
   - File naming conventions specific to {library_name}
   - Module organization best practices for projects using {library_name}
   - Component architecture recommendations for {library_name}
   - Code splitting strategies appropriate for {library_name}

2. Common Patterns and Anti-patterns:
   - Design patterns specific to {library_name}
   - Recommended approaches for common tasks with {library_name}
   - Anti-patterns and code smells to avoid when using {library_name}
   - State management best practices for {library_name} applications
   - Error handling patterns appropriate for {library_name}

3. Performance Considerations:
   - Optimization techniques specific to {library_name}
   - Memory management considerations for applications using {library_name}
   - Rendering optimization for {library_name} (if applicable)
   - Bundle size optimization strategies for projects using {library_name}
   - Lazy loading strategies appropriate for {library_name}

4. Security Best Practices:
   - Common vulnerabilities and how to prevent them with {library_name}
   - Input validation best practices for {library_name}
   - Authentication and authorization patterns for {library_name}
   - Data protection strategies relevant to {library_name}
   - Secure API communication with {library_name}

5. Testing Approaches:
   - Unit testing strategies for {library_name} components
   - Integration testing approaches for {library_name} applications
   - End-to-end testing recommendations for {library_name} projects
   - Test organization best practices for {library_name}
   - Mocking and stubbing techniques specific to {library_name}

6. Common Pitfalls and Gotchas:
   - Frequent mistakes developers make when using {library_name}
   - Edge cases to be aware of when using {library_name}
   - Version-specific issues with {library_name}
   - Compatibility concerns between {library_name} and other technologies
   - Debugging strategies for {library_name} applications

7. Tooling and Environment:
   - Recommended development tools for {library_name}
   - Build configuration best practices for projects using {library_name}
   - Linting and formatting recommendations for {library_name} code
   - Deployment best practices for {library_name} applications
   - CI/CD integration strategies for {library_name} projects
